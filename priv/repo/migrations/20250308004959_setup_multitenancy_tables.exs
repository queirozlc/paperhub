defmodule Paperhub.Repo.Migrations.SetupMultitenancyTables do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:users) do
      add :current_team_id, :bigint
    end

    create table(:teams, primary_key: false) do
      add :id, :identity, null: false, primary_key: true
    end

    alter table(:users) do
      modify :current_team_id,
             references(:teams,
               column: :id,
               name: "users_current_team_id_fkey",
               type: :bigint,
               prefix: "public"
             )
    end

    create index(:users, [:current_team_id])

    alter table(:teams) do
      add :name, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :owner_id,
          references(:users,
            column: :id,
            name: "teams_owner_id_fkey",
            type: :bigint,
            prefix: "public"
          ),
          null: false
    end

    create index(:teams, [:owner_id])

    create table(:memberships, primary_key: false) do
      add :role, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :member_id,
          references(:users,
            column: :id,
            name: "memberships_member_id_fkey",
            type: :bigint,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :team_id,
          references(:teams,
            column: :id,
            name: "memberships_team_id_fkey",
            type: :bigint,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create index(:memberships, [:member_id])

    create index(:memberships, [:team_id])
  end

  def down do
    drop_if_exists index(:memberships, [:team_id])

    drop_if_exists index(:memberships, [:member_id])

    drop constraint(:memberships, "memberships_member_id_fkey")

    drop constraint(:memberships, "memberships_team_id_fkey")

    drop table(:memberships)

    drop_if_exists index(:teams, [:owner_id])

    drop constraint(:teams, "teams_owner_id_fkey")

    alter table(:teams) do
      remove :owner_id
      remove :updated_at
      remove :inserted_at
      remove :name
    end

    drop_if_exists index(:users, [:current_team_id])

    drop constraint(:users, "users_current_team_id_fkey")

    alter table(:users) do
      modify :current_team_id, :bigint
    end

    drop table(:teams)

    alter table(:users) do
      remove :current_team_id
    end
  end
end
