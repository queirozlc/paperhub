defmodule Paperhub.Repo.Migrations.AddProjectUsersAndTeams do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false) do
      add :id, :identity, null: false, primary_key: true
      add :email, :citext, null: false
      add :admin?, :boolean, null: false, default: false
      add :name, :text
      add :bio, :text
      add :avatar, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:users, [:email], name: "users_unique_email_index")

    create table(:tokens, primary_key: false) do
      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :jti, :text, null: false, primary_key: true
      add :subject, :text, null: false
      add :expires_at, :utc_datetime, null: false
      add :purpose, :text, null: false
      add :extra_data, :map

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:teams, primary_key: false) do
      add :id, :identity, null: false, primary_key: true
      add :name, :text, null: false

      add :owner_id,
          references(:users,
            column: :id,
            name: "teams_owner_id_fkey",
            type: :bigint,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create table(:team_memberships, primary_key: false) do
      add :id, :identity, null: false, primary_key: true
      add :role, :text

      add :member_id,
          references(:users,
            column: :id,
            name: "team_memberships_member_id_fkey",
            type: :bigint,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :team_id,
          references(:teams,
            column: :id,
            name: "team_memberships_team_id_fkey",
            type: :bigint,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create table(:projects, primary_key: false) do
      add :id, :identity, null: false, primary_key: true
      add :title, :text
      add :description, :text
      add :content, :map
      add :visibility, :text, null: false, default: "private"
      add :slug, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :team_id,
          references(:teams,
            column: :id,
            name: "projects_team_id_fkey",
            type: :bigint,
            prefix: "public",
            on_delete: :delete_all
          )
    end
  end

  def down do
    drop constraint(:projects, "projects_team_id_fkey")

    drop table(:projects)

    drop constraint(:team_memberships, "team_memberships_member_id_fkey")

    drop constraint(:team_memberships, "team_memberships_team_id_fkey")

    drop table(:team_memberships)

    drop constraint(:teams, "teams_owner_id_fkey")

    drop table(:teams)

    drop table(:tokens)

    drop_if_exists unique_index(:users, [:email], name: "users_unique_email_index")

    drop table(:users)
  end
end
