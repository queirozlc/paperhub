name: Elixir CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
env:
  MIX_ENV: test

permissions:
  contents: read

jobs:
  tests:
    # Set up a Postgres DB service. By default, Phoenix applications
    # use Postgres. This creates a database for running tests.
    # Additional services can be defined here if required.
    services:
      db:
        image: postgres:16
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    runs-on: ubuntu-latest
    name: Test on OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}}
    strategy:
      # Specify the OTP and Elixir versions to use when building
      # and running the workflow steps.
      matrix:
        otp: ["25.0", "26.0", "27.0"]
        elixir: ["1.15", "1.17", "1.18"]
        exclude:
          - otp: "27.0"
            elixir: "1.15"
    steps:
      # Step: Setup Elixir + Erlang image as the base.
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup Elixir + Erlang OTP
        id: beam
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{matrix.otp}}
          elixir-version: ${{matrix.elixir}}
      # Step: Define how to cache deps. Restores existing cache if present.
      - name: Cache Elixir Deps
        id: cache-deps
        uses: actions/cache@v4
        env:
          cache-name: cache-elixir-deps
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-
      # Step: Define how to cache the `_build` directory. After the first run,
      # this speeds up tests runs a lot. This includes not re-compiling our
      # project's downloaded deps every run.
      - name: Cache Elixir Build
        id: cache-build
        uses: actions/cache@v4
        env:
          cache-name: cache-compiled-build
        with:
          path: _build
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-
            ${{ runner.os }}-mix-

      # Cache key based on Erlang/Elixir version and the mix.lock hash
      - name: Restore PLT cache
        id: plt_cache
        uses: actions/cache/restore@v3
        with:
          key: |
            plt-${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            plt-${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-
          path: |
            priv/plts

      # Create PLTs if no cache was found
      - name: Create PLTs
        if: steps.plt_cache.outputs.cache-hit != 'true'
        run: mix dialyzer --plt

      # By default, the GitHub Cache action will only save the cache if all steps in the job succeed,
      # so we separate the cache restore and save steps in case running dialyzer fails.
      - name: Save PLT cache
        id: plt_cache_save
        uses: actions/cache/save@v3
        if: steps.plt_cache.outputs.cache-hit != 'true'
        with:
          key: |
            plt-${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
          path: |
            priv/plts

      - name: Run dialyzer
        # Two formats are included for ease of debugging and it is lightly recommended to use both, see https://github.com/jeremyjh/dialyxir/issues/530 for reasoning
        # --format github is helpful to print the warnings in a way that GitHub understands and can place on the /files page of a PR
        # --format dialyxir allows the raw GitHub actions logs to be useful because they have the full warning printed
        run: mix dialyzer --format github --format dialyxir
      # Step: Download project dependencies. If unchanged, uses
      # the cached version.
      - name: Get Dependencies
        run: mix deps.get

      # Step: Compile the project treating any warnings as errors.
      - name: Compile with Warnings as Errors
        run: mix compile --warnings-as-errors

      # Step: Check that the checked in code has already been formatted.
      # This step fails if something was found unformatted.
      - name: Check Code Formatting
        run: mix format --check-formatted

      # Step: Performs static code analysis on the project.
      - name: Run Credo
        run: mix credo

      # Step: Checks for cyclic dependencies in the project.
      - name: Check Cyclic Dependencies
        run: mix xref graph --format cycles --label compile-connected --fail-above 0

      # Step: Check unused deps.
      - name: Check Unused Deps
        run: mix deps.unlock --check-unused

      # Step: Execute the tests and report coverage.
      - name: Run Tests
        run: MIX_ENVT=test mix do compile --warnings-as-errors, coveralls.json

      # Step: Upload the coverage report to Codecov.
      - name: Upload Coverage Report
        uses: codecov/codecov-action@v5
        with:
          files: cover/excoveralls.json
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: ${{ github.repository }}
